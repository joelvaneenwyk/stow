name: 'Build and Test'

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint:
    name: "ShellCheck"
    runs-on: ubuntu-latest
    if: always()

    env:
      DEBIAN_FRONTEND: noninteractive

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: --external-sources
        with:
          ignore: bin


  perl_test_matrix:
    name: "[${{ matrix.msys && 'windows-msys-latest' || matrix.platform }}] Perl v${{ matrix.perl }}"
    runs-on: ${{ matrix.platform }}
    if: always()

    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-latest
          - macos-latest
          - windows-latest

        perl:
          - '5.32'
          - '5.14'

        include:
          - platform: ubuntu-latest
            perl: '5.34'

          - platform: ubuntu-latest
            perl: '5.18'

          - platform: ubuntu-latest
            perl: '5.16'

          - platform: windows-latest
            perl: '5.32'
            msys: true

    env:
      DEBIAN_FRONTEND: noninteractive

      # https://cygwin.com/cygwin-ug-net/using-cygwinenv.html
      MSYS: "winsymlinks:native"

      # Define variants by platform
      script_extension: ${{ (runner.os == "Windows" && !matrix.msys) && '.bat' || '.sh' }}
      script_tool: ${{ (runner.os == "Windows" && !matrix.msys) && 'tools\\' || './tools/' }}
      script_sudo: ${{ startsWith(matrix.platform, 'ubuntu') && 'sudo' || '' }}

      # Need to specify 'strawberry' on Windows. Can pass 'strawberry' to other platforms as it just falls
      # back to default but it does generate a warning.
      perl_distribution: ${{ startsWith(matrix.platform, 'windows') && 'strawberry' || 'default' }}

    defaults:
      run:
        shell: ${{ matrix.msys && 'msys2 {0}' || (runner.os == "Windows" && 'cmd' || 'bash') }}
        working-directory: ${{ github.workspace }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

          # Get all history so we can generate ChangeLog
          fetch-depth: 0

      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.msys }}
        with:
          # Minimal here so that we use the MSYS perl and not the version
          # already installed (if there is one)
          path-type: minimal

          # Need to use MSYS here otherwise we get errors during build of
          # the 'TAP::Formatter::JUnit' package with missing "sys/wait.h"
          msystem: MSYS
          update: false

      - name: Setup Perl ${{ matrix.perl }}
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: ${{ matrix.perl }}

          # Only applies to Windows and uses fallback for other platforms
          distribution: ${{ env.perl_distribution }}

      - name: Install Dependencies
        run: ${{ env.script_sudo }} ${{ env.script_tool }}install-dependencies${{ env.script_extension }}

      - name: Make Stow
        run: ${{ env.script_tool }}make-stow${{ env.script_extension }}

      - name: Run Tests
        run: ${{ env.script_tool }}run-tests${{ env.script_extension }}

      - name: Unix Install
        if: ${{ ! startsWith(matrix.platform, 'windows') }}
        run: |
          ./tools/make-clean.sh

          autoreconf --install
          eval `perl -V:siteprefix`

          # Note: this will complain Test::Output isn't yet installed:
          ./configure --prefix=$siteprefix

          make

          # But that's OK because we install it here:
          - make cpanm

      - name: Unix Distribution
        if: ${{ ! startsWith(matrix.platform, 'windows') }}
        run: |
          make distcheck
          perl Build.PL && ./Build build && cover -test -report coveralls
          ./Build distcheck


  build_test_linux:
    name: "Linux: Build and Test"
    runs-on: ubuntu-latest
    if: always()

    env:
      DEBIAN_FRONTEND: noninteractive

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Dependencies
        working-directory: ${{ github.workspace }}
        run: |
          ./tools/install-dependencies.sh

      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          autoreconf -iv
          eval `perl -V:siteprefix`
          ./configure --prefix=$siteprefix
          make bin/stow bin/chkstow lib/Stow.pm lib/Stow/Util.pm
          ./Build.PL
          sudo ./Build installdeps

      - name: Install
        working-directory: ${{ github.workspace }}
        run: |
          sudo make install

      - name: Test
        working-directory: ${{ github.workspace }}
        run: |
          cpanm --sudo --installdeps --notest .
          prove -I t/ -I bin/ -I lib/ --formatter TAP::Formatter::JUnit --timer --verbose --normalize --parse t/ | tee test_results_ubuntu.xml

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: test_results_ubuntu.xml

  # Create a distribution release
  build_test_linux_release:
    name: "Linux: Build Release"
    runs-on: ubuntu-latest
    if: always()

    env:
      DEBIAN_FRONTEND: noninteractive

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Dependencies
        working-directory: ${{ github.workspace }}
        run: |
          source ./tools/install-dependencies.sh

      - name: Perl Dependencies
        working-directory: ${{ github.workspace }}
        run: |
          cpanm --sudo --installdeps --notest .

      - name: Install
        working-directory: ${{ github.workspace }}
        run: |
          autoreconf --install
          eval `perl -V:siteprefix`
          ./configure --prefix=$siteprefix
          make
          make cpanm

      - name: Release
        working-directory: ${{ github.workspace }}

        # Needed so that the coveralls package knows that we are using GitHub Actions
        # and to look for the secret key, see:
        #   https://github.com/kan/coveralls-perl/blob/master/lib/Devel/Cover/Report/Coveralls.pm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
          make distcheck
          perl Build.PL
          ./Build build
          cover -test -report coveralls
          ./Build distcheck


  build_test_windows_msys2:
    name: "MSYS2: Build and Test"
    runs-on: windows-latest
    if: always()

    env:
      # https://cygwin.com/cygwin-ug-net/using-cygwinenv.html
      MSYS: "winsymlinks:native"
      HOME: "${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: msys2/setup-msys2@v2
        with:
          # Minimal here so that we use the MSYS perl and not the version
          # already installed (if there is one)
          path-type: minimal

          # Need to use MSYS here otherwise we get errors during build of
          # the 'TAP::Formatter::JUnit' package with missing "sys/wait.h"
          msystem: MSYS
          update: false

      - name: MSYS2 Install Dependencies
        shell: msys2 {0}
        run: |
          cd $(cygpath '${{ github.workspace }}')
          ./tools/install-dependencies.sh

      - name: MSYS2 Make Stow
        shell: msys2 {0}
        run: |
          cd $(cygpath '${{ github.workspace }}')
          ./tools/make-stow.sh

      - name: MSYS2 Test
        shell: msys2 {0}
        run: |
          cd $(cygpath '${{ github.workspace }}')
          source ./tools/stow-lib.sh
          cpanm --installdeps --notest .
          prove -I t/ -I bin/ -I lib/ --formatter TAP::Formatter::JUnit --timer --verbose --normalize --parse t/ | tee test_results_msys2.xml

      - uses: actions/upload-artifact@v2
        if: always()
        name: Upload Logs
        with:
          name: cpanm-logs

          # https://github.com/msys2/setup-msys2/blob/master/main.js
          path: D:\a\stow\stow\.cpan*\work\**\*.log

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: test_results_msys2.xml


  build_test_windows:
    name: "Windows: Build and Test"
    runs-on: windows-latest
    if: always()

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.32'
          distribution: strawberry

      - name: Perl Dependencies
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          call tools\install-dependencies.bat

      - name: Make Stow
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          call tools\make-stow.bat

      - name: Build
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          perl Build.PL
          call Build.bat installdeps
          call Build.bat build

      - name: Install Test Dependencies
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          call cpanm --installdeps --notest .

      - name: Test
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          prove -I t/ -I bin/ -I lib/ --formatter TAP::Formatter::JUnit --timer --verbose --normalize --parse t/ >test_results_windows.xml

      - uses: actions/upload-artifact@v2
        if: always()
        name: Upload Logs
        with:
          name: cpanm-logs

          # https://github.com/msys2/setup-msys2/blob/master/main.js
          path: C:\msys64\home\runneradmin\.cpan*\work\**\*.log

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: test_results_windows.xml


  public_test_results:
    name: "Publish Unit Tests Results"
    runs-on: ubuntu-latest
    needs:
      - build_test_linux
      - build_test_windows
      - build_test_windows_msys2

    # The other jobs might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "Stow Test Report"
          path: artifacts/**/*.xml
          reporter: java-junit
