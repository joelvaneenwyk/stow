name: 'Build and Test'

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-test-linux:
    name: "Linux: Build and Test"
    runs-on: ubuntu-latest

    env:
      DEBIAN_FRONTEND: noninteractive

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Dependencies
        working-directory: ${{ github.workspace }}
        run: |
          sudo apt-get update
          sudo apt-get -y install --no-install-recommends \
            autoconf \
            bzip2 \
            cpanminus \
            gawk \
            curl \
            libssl-dev \
            make \
            texinfo texlive \
            patch

      - name: Perl Dependencies
        working-directory: ${{ github.workspace }}
        run: |
          ./.github/install-dependencies.sh

      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          autoreconf -iv
          eval `perl -V:siteprefix`
          ./configure --prefix=$siteprefix
          make bin/stow bin/chkstow lib/Stow.pm lib/Stow/Util.pm
          ./Build.PL
          sudo ./Build installdeps

      - name: Install
        working-directory: ${{ github.workspace }}
        run: |
          sudo make install

      - name: Test
        working-directory: ${{ github.workspace }}
        run: |
          prove -I t/ -I bin/ -I lib/ --formatter TAP::Formatter::JUnit --verbose --normalize --parse t/ | tee test_results_ubuntu.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: test_results_ubuntu.xml

  build-test-msys2:
    name: "MSYS2: Build and Test"
    needs: build-test-linux
    runs-on: windows-latest
    env:
      # https://cygwin.com/cygwin-ug-net/using-cygwinenv.html
      MSYS: "winsymlinks:native"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: msys2/setup-msys2@v2
        with:
          # Minimal here so that we use the MSYS perl and not the version
          # already installed (if there is one)
          path-type: minimal

          # Need to use MSYS here otherwise we get errors during build of
          # the 'TAP::Formatter::JUnit' package with missing "sys/wait.h"
          msystem: MSYS

          update: false
          install: >-
            base-devel
            msys2-devel
            msys2-runtime-devel
            msys2-keyring
            openssl
            git
            gcc
            make
            autoconf
            automake1.16
            automake-wrapper
            libtool
            libcrypt-devel
            perl

      - name: MSYS2 Install Dependencies
        shell: msys2 {0}
        run: |
          cd $(cygpath '${{ github.workspace }}')
          ./.github/install-dependencies.sh

      - name: MSYS2 Make Stow
        shell: msys2 {0}
        run: |
          cd $(cygpath '${{ github.workspace }}')
          ./.github/make-stow.sh

      - name: MSYS2 Test
        shell: msys2 {0}
        run: |
          cd $(cygpath '${{ github.workspace }}')
          prove -I t/ -I bin/ -I lib/ --formatter TAP::Formatter::JUnit --verbose --normalize --parse t/ | tee test_results_msys2.xml

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: test_results_msys2.xml

  build-test-windows:
    name: "Windows: Build and Test"
    needs: build-test-linux
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.32'
          distribution: strawberry

      - name: Perl Dependencies
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          call .github\install-dependencies.bat

      - name: Build
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          call .github\make-stow.bat
          perl Build.PL
          call Build.bat installdeps
          call Build.bat build

      # This will fail until symlinks are supported
      - name: Test
        continue-on-error: true
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          prove -I t/ -I bin/ -I lib/ --formatter TAP::Formatter::JUnit --verbose --normalize --parse t/ > test_results_windows.xml

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: test_results_windows.xml

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs:
      - build-test-msys2
      - build-test-windows
    runs-on: ubuntu-latest

    # The other jobs might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: "Stow Test Results"
          report_individual_runs: true
          files: artifacts/**/*.xml

      - name: Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "Stow Test Report"
          path: artifacts/**/*.xml
          reporter: java-junit
